import grpc
import greeter_pb2
import greeter_pb2_grpc
import random
import logging
from flask import session

# Constants
GRPC_SERVER_LIST = ['localhost:50051', 'localhost:50052', 'localhost:50053']
MAX_RETRIES = 3

# gRPC channels initialization
grpc_channels = {address: grpc.insecure_channel(address) for address in GRPC_SERVER_LIST}
current_server = None


def _connect_to_grpc(func):
    def wrapper(*args, **kwargs):
        global current_server
        if current_server is None:
            _select_initial_server()

        for attempt in range(MAX_RETRIES):
            if not current_server:
                logging.error("‚ùå Kh√¥ng c√≥ server n√†o kh·∫£ d·ª•ng!")
                break

            try:
                channel = grpc_channels[current_server]
                logging.info(f"üîó ƒêang k·∫øt n·ªëi t·ªõi server {current_server} (L·∫ßn {attempt + 1})")
                return func(channel, *args, **kwargs)
            except grpc.RpcError as e:
                logging.error(f"‚ùå L·ªói k·∫øt n·ªëi t·ªõi {current_server}: {e.details()}")
                _switch_server()
            except Exception as e:
                logging.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
                break

        logging.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi b·∫•t k·ª≥ backend n√†o sau nhi·ªÅu l·∫ßn th·ª≠!")
        return None
    return wrapper


def _select_initial_server():
    """Ch·ªçn server ban ƒë·∫ßu v√† lo·∫°i b·ªè c√°c server kh√¥ng kh·∫£ d·ª•ng."""
    global current_server
    available_servers = []

    for server in GRPC_SERVER_LIST:
        if test_grpc_connection(server):
            available_servers.append(server)

    if available_servers:
        current_server = random.choice(available_servers)
        logging.info(f"‚úÖ Server kh·ªüi ƒë·ªông ban ƒë·∫ßu: {current_server}")
    else:
        logging.error("‚ùå Kh√¥ng c√≥ server n√†o kh·∫£ d·ª•ng ban ƒë·∫ßu!")
        current_server = None


def _switch_server():
    """Chuy·ªÉn sang server kh√°c khi c√≥ l·ªói k·∫øt n·ªëi."""
    global current_server
    remaining_servers = [srv for srv in GRPC_SERVER_LIST if srv != current_server]

    if remaining_servers:
        current_server = random.choice(remaining_servers)
        logging.warning(f"‚ö†Ô∏è Chuy·ªÉn sang server {current_server}")
    else:
        logging.error("‚ùå Kh√¥ng c√≥ server n√†o kh·∫£ d·ª•ng!")
        current_server = None


def test_grpc_connection(server_address):
    """Ki·ªÉm tra k·∫øt n·ªëi gRPC ƒë∆°n gi·∫£n."""
    try:
        with grpc.insecure_channel(server_address) as channel:
            grpc.channel_ready_future(channel).result(timeout=3)
            logging.info(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi {server_address}")
            return True
    except grpc.FutureTimeoutError:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi {server_address} (Timeout)")
    except grpc.RpcError as e:
        logging.error(f"‚ùå L·ªói gRPC t·ªõi {server_address}: {e.details()}")
    return False


#==============================================================================

def _get_cart():
    """Retrieve cart from session."""
    return session.setdefault('cart', [])


def _update_cart(cart):
    """Update cart in session."""
    session['cart'] = cart
    session.modified = True


#==============================================================================

@_connect_to_grpc
def _send_user_to_grpc_server(channel, email, password):
    try:
        stub = greeter_pb2_grpc.GreeterStub(channel)

        # Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i
        check_request = greeter_pb2.AuthRequest(username=email, password=password)
        existence_response = stub.CheckUserExistence(check_request)

        if existence_response.exists:
            logging.warning(f"‚ö†Ô∏è T√†i kho·∫£n {email} ƒë√£ t·ªìn t·∫°i tr√™n server.")
            return False

        # N·∫øu ch∆∞a t·ªìn t·∫°i, th·ª±c hi·ªán ƒëƒÉng k√Ω
        request = greeter_pb2.RegisterRequest(username=email, password=password)
        response = stub.Register(request)

        if response.success:
            logging.info(f"‚úÖ ƒêƒÉng k√Ω t√†i kho·∫£n {email} th√†nh c√¥ng tr√™n server.")
            return True
        else:
            logging.warning(f"‚ö†Ô∏è {response.message}")

    except grpc.FutureTimeoutError:
        logging.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server (Timeout)")
    except grpc.RpcError as e:
        logging.error(f"‚ùå L·ªói khi g·ª≠i request GRPC: {e.details()}")

    return False


@_connect_to_grpc
def _check_user_existence(channel, email):
    stub = greeter_pb2_grpc.GreeterStub(channel)
    request = greeter_pb2.AuthRequest(username=email)
    response = stub.CheckUserExistence(request)
    return response.exists


@_connect_to_grpc
def _authenticate_with_grpc(channel, username, password):
    stub = greeter_pb2_grpc.GreeterStub(channel)
    response = stub.Authenticate(greeter_pb2.AuthRequest(username=username, password=password), timeout=3)
    if response.success:
        logging.info(f"‚úÖ ƒê√£ x√°c th·ª±c th√†nh c√¥ng v·ªõi {current_server}")
        return True
    else:
        return False

@_connect_to_grpc
def _get_server_code(channel):
    stub = greeter_pb2_grpc.GreeterStub(channel)
    response = stub.GetIndexPage(greeter_pb2.EmptyRequest(), timeout=3)
    logging.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi {current_server}")
    return response.html_content

#==============================================================================

# Ki·ªÉm tra k·∫øt n·ªëi server ban ƒë·∫ßu
for port in [50051, 50052, 50053]:
    test_grpc_connection(f'localhost:{port}')
